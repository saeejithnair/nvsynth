/******************************************************************************
 *       Copyright 1986, 2019 NVIDIA ARC GmbH. All rights reserved.           *
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIAâ€™s Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

//* 1.0.0 - first version
//* 1.0.1 - Emissive color affected by opacity
//        - Support opacity mask
//* 1.0.2 - Unlit translucent
//* 1.0.3 - specular bsdf instead of microfacet ggx smith bsdf

mdl 1.3;

import df::*;
import state::*;
import math::*;
import tex::*;
import anno::*;

float emissive_multiplier()
[[
    anno::description("the multiplier to convert UE4 emissive to raw data"),
    anno::noinline()
]]
{
    return 20.0f * 128.0f;
}

color get_translucent_tint(color base_color, float opacity)
[[
    anno::description("base color of UE4 translucent"),
    anno::noinline()
]]
{
	return math::lerp(color(1.0), base_color, opacity);
}

// Just for UE4 distilling
float get_translucent_opacity(float opacity)
[[
	anno::noinline()
]]
{
	return opacity;
}

color get_emissive_intensity(color emissive, float opacity)
[[
    anno::description("emissive color of UE4 translucent"),
    anno::noinline()
]]
{
	return emissive * opacity;
}

float3 tangent_space_normal(
    float3 normal = float3(0.0,0.0,1.0),
    float3 tangent_u = state::texture_tangent_u(0),
	float3 tangent_v = state::texture_tangent_v(0)
)
[[
    anno::description("Interprets the vector in tangent space"),
    anno::noinline()
]]
{
    return math::normalize(
        tangent_u * normal.x +
        tangent_v * normal.y +
        state::normal() * (normal.z));
}

export material OmniUe4Translucent(
	float3 base_color = float3(0.0, 0.0, 0.0),
	float metallic = 0.0,
	float roughness = 0.5,
	float specular = 0.5,
	float3 normal = float3(0.0,0.0,1.0),
	float opacity = 1.0,
    float opacity_mask = 1.0,
	float3 emissive_color = float3(0.0, 0.0, 0.0),
	float3 displacement = float3(0.0),
	uniform float refraction = 1.0,
	uniform bool two_sided = false,
	uniform bool is_tangent_space_normal = true,
	uniform bool is_unlit = false
)
[[
	anno::display_name("Omni UE4 Translucent"),
	anno::description("Omni UE4 Translucent, supports UE4 Translucent shading model"),
	anno::version( 1, 0, 0),
	anno::author("NVIDIA CORPORATION"), 
	anno::key_words(string[]("omni", "UE4", "omniverse", "translucent"))
]]
 = let {     
	color final_base_color = math::saturate(base_color);
	float final_metallic = math::saturate(metallic);
	float final_roughness = math::saturate(roughness);
	float final_specular = math::saturate(specular);
	color final_emissive_color = math::max(emissive_color, 0.0f) * emissive_multiplier(); /*factor for converting ue4 emissive to raw value*/
	float final_opacity = math::saturate(opacity);
	float3 final_normal = math::normalize(normal);
 
 
  // - compute final roughness by squaring the "roughness" parameter
   float alpha = final_roughness * final_roughness;
   // reduce the reflectivity at grazing angles to avoid "dark edges" for high roughness due to the layering
   float grazing_refl = math::max((1.0 - final_roughness), 0.0);

	float3 the_normal =  is_unlit ? state::normal() : 
							(is_tangent_space_normal ? tangent_space_normal(
                                            normal:         final_normal,
                                            tangent_u:      state::texture_tangent_u(0),
                                            tangent_v:      state::texture_tangent_v(0)
                            ) : final_normal);

   // for the dielectric component we layer the glossy component on top of the diffuse one,
   // the glossy layer has no color tint
       
   bsdf dielectric_component = df::custom_curve_layer(
       weight: final_specular,
       normal_reflectivity: 0.08,
       grazing_reflectivity: grazing_refl,
       layer: df::microfacet_ggx_vcavities_bsdf(roughness_u: alpha),
       base: df::diffuse_reflection_bsdf(tint: final_base_color));

   // the metallic component doesn't have a diffuse component, it's only glossy
   // base_color is applied to tint it
   bsdf metallic_component = df::microfacet_ggx_vcavities_bsdf(tint: final_base_color, roughness_u: alpha);

   // final BSDF is a linear blend between dielectric and metallic component
   bsdf dielectric_metal_mix =
       df::normalized_mix(
           components:
               df::bsdf_component[](
                   df::bsdf_component(
                       component: metallic_component,
                       weight: final_metallic),
                   df::bsdf_component(
                       component: dielectric_component,
                       weight: 1.0-final_metallic)
               )
       );
 
	bsdf frosted_bsdf = df::specular_bsdf(
									tint: color(1),
									mode: df::scatter_reflect_transmit
									);							
	
	bsdf final_mix_bsdf =
	   is_unlit ? df::specular_bsdf(
							tint: get_translucent_tint(base_color: final_base_color, opacity: final_opacity),
							mode: df::scatter_reflect_transmit
							)
	   : df::normalized_mix(
           components:
               df::bsdf_component[](
                   df::bsdf_component(
                       component: dielectric_metal_mix,
                       weight: get_translucent_opacity(final_opacity)),
                   df::bsdf_component(
                       component: frosted_bsdf,
                       weight: 1.0-get_translucent_opacity(final_opacity))
               )
       );
} 
in material(
	thin_walled: two_sided, // Graphene?
	ior: color(refraction), //refraction
	surface: material_surface(
		scattering: final_mix_bsdf,
		emission:
            material_emission (
                emission:  df::diffuse_edf (),
                intensity: get_emissive_intensity(emissive: final_emissive_color, opacity: final_opacity)
                )
	),
	
	geometry: material_geometry(
		displacement: displacement,
		normal: the_normal,
        cutout_opacity: opacity_mask
	)	
);
